name: Build Docker Image for JDK 17 Build Environment and Push to GitHub Packages

on:
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: alpine-3.19-with-jdk17-build-env
  DOCKER_IMAGE_TAG: 3.19-latest
  DOCKER_FILE: Dockerfile-alpine
  REF_PROJECT: ../../hello_java_world

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        path: dockers

    # 'hello_java_world' 저장소에는 간단한 '메이븐 멀티 모듈 프로젝트'가 구성되어 있다.
    # 이 샘플 프로젝트에는 공통으로 자주 사용하는 의존성이 정의되어 있다. 따라서 이 프로젝트를
    # 참조해서 도커 이미지를 빌드해두면 미리 의존성을 다운로드 받아두는 효과가 있다. 
    - name: Checkout 'hello_java_world'
      uses: actions/checkout@v2
      with:
        repository: ghjang/hello_java_world
        path: hello_java_world

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to GitHub Docker Registry
      uses: docker/login-action@v1 
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set execute permissions for script
      run: chmod +x dockers/jdk17-build-env/_build_image.sh

    - name: Run script to build Docker image
      run: |
        cd dockers/jdk17-build-env
        ./_build_image.sh \
        ${{ env.DOCKER_IMAGE_NAME }} \
        ${{ env.DOCKER_IMAGE_TAG }} \
        ${{ env.DOCKER_FILE }} \
        ${{ env.REF_PROJECT }}

    # 동일한 태그로 이미지를 푸시하면, GitHub Packages에 있는 기존 이미지는 완전히 새 이미지로 덮어쓰여진다.
    # 기존 이미지는 더 이상 접근할 수 없게 되며, 저장소에서도 완전히 제거된다. 이는 GitHub Packages의
    # 저장소 용량을 관리하는 데 도움이 된다.하지만, GitHub Packages가 아닌 다른 저장소에 푸시할 경우,
    # 기존 이미지는 유지되고 새 이미지는 새로운 레이어로 추가될 수도 있다.
    - name: Push Docker image to GitHub Packages
      run: |
        TARGET_IMAGE=ghcr.io/${{ github.repository }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
        docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }} $TARGET_IMAGE
        docker push $TARGET_IMAGE
